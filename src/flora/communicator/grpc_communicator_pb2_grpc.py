# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

# import grpc_communicator_pb2 as grpc__communicator__pb2
import src.flora.communicator.grpc_communicator_pb2 as grpc__communicator__pb2

GRPC_GENERATED_VERSION = "1.73.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in grpc_communicator_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class CentralServerStub(object):
    """Service definition for central aggregation server"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendUpdate = channel.unary_unary(
            "/src.flora.communicator.CentralServer/SendUpdate",
            request_serializer=grpc__communicator__pb2.ModelUpdate.SerializeToString,
            response_deserializer=grpc__communicator__pb2.UpdateResponse.FromString,
            _registered_method=True,
        )
        self.GetUpdatedModel = channel.unary_unary(
            "/src.flora.communicator.CentralServer/GetUpdatedModel",
            request_serializer=grpc__communicator__pb2.GetModelRequest.SerializeToString,
            response_deserializer=grpc__communicator__pb2.ModelParameters.FromString,
            _registered_method=True,
        )
        self.RegisterClient = channel.unary_unary(
            "/src.flora.communicator.CentralServer/RegisterClient",
            request_serializer=grpc__communicator__pb2.ClientInfo.SerializeToString,
            response_deserializer=grpc__communicator__pb2.RegistrationResponse.FromString,
            _registered_method=True,
        )


class CentralServerServicer(object):
    """Service definition for central aggregation server"""

    def SendUpdate(self, request, context):
        """send updates to server"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetUpdatedModel(self, request, context):
        """Get updated model from server"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterClient(self, request, context):
        """Register client with server"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CentralServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.SendUpdate,
            request_deserializer=grpc__communicator__pb2.ModelUpdate.FromString,
            response_serializer=grpc__communicator__pb2.UpdateResponse.SerializeToString,
        ),
        "GetUpdatedModel": grpc.unary_unary_rpc_method_handler(
            servicer.GetUpdatedModel,
            request_deserializer=grpc__communicator__pb2.GetModelRequest.FromString,
            response_serializer=grpc__communicator__pb2.ModelParameters.SerializeToString,
        ),
        "RegisterClient": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterClient,
            request_deserializer=grpc__communicator__pb2.ClientInfo.FromString,
            response_serializer=grpc__communicator__pb2.RegistrationResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "src.flora.communicator.CentralServer", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "src.flora.communicator.CentralServer", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class CentralServer(object):
    """Service definition for central aggregation server"""

    @staticmethod
    def SendUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/src.flora.communicator.CentralServer/SendUpdate",
            grpc__communicator__pb2.ModelUpdate.SerializeToString,
            grpc__communicator__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetUpdatedModel(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/src.flora.communicator.CentralServer/GetUpdatedModel",
            grpc__communicator__pb2.GetModelRequest.SerializeToString,
            grpc__communicator__pb2.ModelParameters.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RegisterClient(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/src.flora.communicator.CentralServer/RegisterClient",
            grpc__communicator__pb2.ClientInfo.SerializeToString,
            grpc__communicator__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
